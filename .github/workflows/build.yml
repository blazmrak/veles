name: Build
on:
  push:
    tags:
      - "*"
    branches:
      - master
  pull_request:
permissions:
  contents: write
jobs:
  build-jar:
    name: Build uber jar
    runs-on: ubuntu-latest
    env:
      veles-version: 0.1.0
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: "25"

      - name: Download veles
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download ${{ env.veles-version }} --pattern "*.jar" --dir ./release
      - name: Format
        run: |
          java -jar ./release/veles-${{ env.veles-version}}.jar format -c
      - name: Cache Maven dependencies
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('veles.yaml') }}
          restore-keys: |
            maven-
      - name: Compile
        run: |
          java -jar ./release/veles-${{ env.veles-version}}.jar compile -u

      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: veles-jar
          path: target/app-uber.jar

  build-native:
    name: Build on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    needs: build-jar
    strategy:
      matrix:
        include:
          - os: linux
            arch: x86_64
            runner: ubuntu-latest

          # Uncomment when someone will need it
          # - os: linux
          #   arch: arm64
          #   runner: ubuntu-24.04-arm

          # - os: macos
          #   arch: x86_64
          #   runner: macos-13

          - os: macos
            arch: arm64
            runner: macos-14

          - os: windows
            arch: x86_64
            runner: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: "25"
          distribution: "graalvm"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: "true"
      - uses: actions/download-artifact@v5
        with:
          name: veles-jar
          path: ./artifact

      - name: Build executable
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir target
          native-image -jar ./artifact/app-uber.jar -o target/veles

      - name: Package executable UNIX
        if: matrix.os != 'windows'
        run: |
          cd target
          tar -czf ../veles-${{ matrix.os }}-${{ matrix.arch }}.tar.gz veles
          cd ..

      - name: Package executable WIN
        if: matrix.os == 'windows'
        run: |
          cd target
          tar -czf ../veles-${{ matrix.os }}-${{ matrix.arch }}.tar.gz veles.exe
          cd ..

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: veles-${{ matrix.os }}-${{ matrix.arch }}
          path: veles-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-native
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v5
        with:
          path: ./release-artifacts

      - name: Determine release type
        id: rel
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag_release=true" >> "$GITHUB_OUTPUT"
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          else
            echo "tag_release=false" >> "$GITHUB_OUTPUT"
            echo "tag_name=nightly" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Release
        run: |
          if [[ "${{ steps.rel.outputs.tag_release }}" == "true" ]]; then
            echo "Creating release ${{ steps.rel.outputs.tag_name }}"
            gh release create "${{ steps.rel.outputs.tag_name }}" ./release-artifacts/**/* \
              --title "${{ steps.rel.outputs.tag_name }}" \
              --generate-notes
          else
            echo "Creating prerelease..."
            gh release delete nightly --yes || true
            git push origin :nightly || true
            gh release create "${{ steps.rel.outputs.tag_name }}" ./release-artifacts/**/* \
              --title "Latest development build" \
              --generate-notes \
              --prerelease
          fi
        env:
          GH_TOKEN: ${{ github.token }}
